class Purse

types
public CardID = token
instance variables
private balance : nat;
private cardNo : CardID;

operations

public IncreaseBal: nat ==> ()
IncreaseBal(sum) ==
    balance := balance + sum;

public DecreaseBal: nat ==> ()
DecreaseBal(sum) ==
    balance := balance - sum;
pre sum <= balance;

public GetBalance:() ==>
GetBalance() ==
    return balance;

public GetCardNo:() ==> CardId
GetCardNo() ==
    return cardNo;

Public Purse CardId * nat ==> Purse
Purse(newId, startbal) == 
( cardNo := newId;
  balance := startbal;
)

functions 
-- no functions currently defined

end Purse

-- Operations used in Purse are:
-- IncreaseBal, DecreaseBal, GetBalance, GetCardNo
-- IncreaseBal and DecreaseBal are used to change the balance
-- Override option used.
-- Purse constructor override cardNo and balance

-- Invariants used in Purse are:
-- CardNo >= 0


class System

instance variables
private Purses : map Purse `CardId to purse;
inv forall p in set dom Purses & Purses(p).GetCardNo() = p;
private Log: seq of Transaction := [];

types

public Tansaction ::
    fromId : Purse`CardId
    toId : Purse`CardId
    sum : nat

operations

public Transfer: Purse`CardId * Purse`CardId * nat ==> ()
Transfer(fromId, toId, sum) ==
    (Purses(fromId).DecreaseBal(sum);
    Purses(toId).IncreaseBal(sum);
    )
pre {fromId, toId} subset dom Purses and 
    fromId <> toId and
    Purses(fromId).GetBalance() >= sum;

public System: set of Purse ==> System
System(PurseSet) ==
    Purses := {p.GetCardNo() |-> p | p in PurseSet}
pre forall p,q in set PurseSet & p <> q => p.GetCardNo() <> q.GetCardNo();

public TotalTransferred:() ==> nat
TotalTransferred() ==
    return TotalSum(Log);

functions
-- no functions was defined

end System



-- Operations used in System are:
-- Transfer, System, TotalTransferred
-- Invariants used in System are:
-- forall p in set dom Purses & Purses(p).GetCardNo() = p
